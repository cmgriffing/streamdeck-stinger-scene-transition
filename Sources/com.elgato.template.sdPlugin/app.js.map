{"version":3,"sources":["app.js"],"names":["connected","jsn","$SD","on","jsonObj","action","onWillAppear","onKeyUp","onSendToPlugin","onDidReceiveSettings","console","log","settings","Utils","getProp","doSomeThing","setTitle","payload","Object","keys","length","mynameinput","sdpi_collection","value","undefined","key","saveSettings","hasOwnProperty","api","setSettings","context","inJsonData","caller","tagColor"],"mappings":";AAgCA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAhBA,SAASA,EAAUC,GAEfC,IAAIC,GAAG,wCAAyC,SAACC,GAAYC,OAAAA,EAAOC,aAAaF,KACjFF,IAAIC,GAAG,mCAAoC,SAACC,GAAYC,OAAAA,EAAOE,QAAQH,KACvEF,IAAIC,GAAG,0CAA2C,SAACC,GAAYC,OAAAA,EAAOG,eAAeJ,KACrFF,IAAIC,GAAG,gDAAiD,SAACC,GAAYC,OAAAA,EAAOI,qBAAqBL,KACjGF,IAAIC,GAAG,wDAAyD,SAACC,GAC7DM,QAAQC,IAAI,OAAQ,oDAAqD,yCAE7ET,IAAIC,GAAG,2DAA4D,SAACC,GAChEM,QAAQC,IAAI,OAAQ,kDAAmD,4CAZ/ET,IAAIC,GAAG,YAAa,SAACC,GAAYJ,OAAAA,EAAUI,KAkB3C,IAAMC,EAAS,CACXO,SAAS,GACTH,qBAAsB,SAASR,GAC3BS,QAAQC,IAAI,OAAQ,kDAAmD,iCAElEC,KAAAA,SAAWC,MAAMC,QAAQb,EAAK,mBAAoB,IAClDc,KAAAA,YAAY,KAAKH,SAAU,uBAAwB,UAWlDI,KAAAA,SAASf,IAUnBK,aAAc,SAAUL,GACpBS,QAAQC,IAAI,gDAAiDV,EAAIgB,QAAQL,UAUpEA,KAAAA,SAAWX,EAAIgB,QAAQL,SAGvB,KAAKA,UAAkD,IAAtCM,OAAOC,KAAK,KAAKP,UAAUQ,SACxCR,KAAAA,SAASS,YAAc,YAE3BL,KAAAA,SAASf,IAGlBM,QAAS,SAAUN,GACVc,KAAAA,YAAYd,EAAK,UAAW,UAGrCO,eAAgB,SAAUP,GAOhBqB,IAAAA,EAAkBT,MAAMC,QAAQb,EAAK,0BAA2B,IAClEqB,EAAgBC,YAAmCC,IAA1BF,EAAgBC,OACpCR,KAAAA,YAAeO,EAAAA,GAAAA,EAAgBG,IAAOH,EAAgBC,OAAS,iBAAkB,YAS9FG,aAAc,SAAUzB,EAAKqB,GACzBZ,QAAQC,IAAI,gBAAiBV,GACzBqB,EAAgBK,eAAe,QAAiC,IAAvBL,EAAgBG,KACrDH,EAAgBC,YAAmCC,IAA1BF,EAAgBC,QACpCX,KAAAA,SAASU,EAAgBG,KAAOH,EAAgBC,MACrDb,QAAQC,IAAI,kBAAmB,KAAKC,UACpCV,IAAI0B,IAAIC,YAAY5B,EAAI6B,QAAS,KAAKlB,YAelDI,SAAU,SAASf,GACX,KAAKW,UAAY,KAAKA,SAASe,eAAe,iBAC9CjB,QAAQC,IAAI,2DAA4D,KAAKC,SAASS,aACtFnB,IAAI0B,IAAIZ,SAASf,EAAI6B,QAAS,KAAKlB,SAASS,eAUpDN,YAAa,SAASgB,EAAYC,EAAQC,GACtCvB,QAAQC,IAAI,OAAqCsB,6BAAAA,OAAAA,GAAY,OAAyDD,sBAAAA,6BAAAA,OAAAA","file":"app.js","sourceRoot":"../../src","sourcesContent":["/* global $CC, Utils, $SD */\n\n/**\n * Here are a couple of wrappers we created to help ypu quickly setup\n * your plugin and subscribe to events sent by Stream Deck to your plugin.\n */\n\n /**\n  * The 'connected' event is sent to your plugin, after the plugin's instance\n  * is registered with Stream Deck software. It carries the current websocket\n  * and other information about the current environmet in a JSON object\n  * You can use it to subscribe to events you want to use in your plugin.\n  */\n\n$SD.on('connected', (jsonObj) => connected(jsonObj));\n\nfunction connected(jsn) {\n    /** subscribe to the willAppear and other events */\n    $SD.on('com.elgato.template.action.willAppear', (jsonObj) => action.onWillAppear(jsonObj));\n    $SD.on('com.elgato.template.action.keyUp', (jsonObj) => action.onKeyUp(jsonObj));\n    $SD.on('com.elgato.template.action.sendToPlugin', (jsonObj) => action.onSendToPlugin(jsonObj));\n    $SD.on('com.elgato.template.action.didReceiveSettings', (jsonObj) => action.onDidReceiveSettings(jsonObj));\n    $SD.on('com.elgato.template.action.propertyInspectorDidAppear', (jsonObj) => {\n        console.log('%c%s', 'color: white; background: black; font-size: 13px;', '[app.js]propertyInspectorDidAppear:');\n    });\n    $SD.on('com.elgato.template.action.propertyInspectorDidDisappear', (jsonObj) => {\n        console.log('%c%s', 'color: white; background: red; font-size: 13px;', '[app.js]propertyInspectorDidDisappear:');\n    });\n};\n\n/** ACTIONS */\n\nconst action = {\n    settings:{},\n    onDidReceiveSettings: function(jsn) {\n        console.log('%c%s', 'color: white; background: red; font-size: 15px;', '[app.js]onDidReceiveSettings:');\n\n        this.settings = Utils.getProp(jsn, 'payload.settings', {});\n        this.doSomeThing(this.settings, 'onDidReceiveSettings', 'orange');\n\n        /**\n         * In this example we put a HTML-input element with id='mynameinput'\n         * into the Property Inspector's DOM. If you enter some data into that\n         * input-field it get's saved to Stream Deck persistently and the plugin\n         * will receice the updated 'didReceiveSettings' event.\n         * Here we look for this setting and use it to change the title of\n         * the key.\n         */\n\n         this.setTitle(jsn);\n    },\n\n    /**\n     * The 'willAppear' event is the first event a key will receive, right before it gets\n     * showed on your Stream Deck and/or in Stream Deck software.\n     * This event is a good place to setup your plugin and look at current settings (if any),\n     * which are embedded in the events payload.\n     */\n\n    onWillAppear: function (jsn) {\n        console.log(\"You can cache your settings in 'onWillAppear'\", jsn.payload.settings);\n        /**\n         * \"The willAppear event carries your saved settings (if any). You can use these settings\n         * to setup your plugin or save the settings for later use.\n         * If you want to request settings at a later time, you can do so using the\n         * 'getSettings' event, which will tell Stream Deck to send your data\n         * (in the 'didReceiceSettings above)\n         *\n         * $SD.api.getSettings(jsn.context);\n        */\n        this.settings = jsn.payload.settings;\n\n        // nothing in the settings pre-fill something just for demonstration purposes\n        if (!this.settings || Object.keys(this.settings).length === 0) {\n            this.settings.mynameinput = 'TEMPLATE';\n        }\n        this.setTitle(jsn);\n    },\n\n    onKeyUp: function (jsn) {\n        this.doSomeThing(jsn, 'onKeyUp', 'green');\n    },\n\n    onSendToPlugin: function (jsn) {\n        /**\n         * this is a message sent directly from the Property Inspector\n         * (e.g. some value, which is not saved to settings)\n         * You can send this event from Property Inspector (see there for an example)\n         */\n\n        const sdpi_collection = Utils.getProp(jsn, 'payload.sdpi_collection', {});\n        if (sdpi_collection.value && sdpi_collection.value !== undefined) {\n            this.doSomeThing({ [sdpi_collection.key] : sdpi_collection.value }, 'onSendToPlugin', 'fuchsia');\n        }\n    },\n\n    /**\n     * This snippet shows, how you could save settings persistantly to Stream Deck software\n     * It is not used in this example plugin.\n     */\n\n    saveSettings: function (jsn, sdpi_collection) {\n        console.log('saveSettings:', jsn);\n        if (sdpi_collection.hasOwnProperty('key') && sdpi_collection.key != '') {\n            if (sdpi_collection.value && sdpi_collection.value !== undefined) {\n                this.settings[sdpi_collection.key] = sdpi_collection.value;\n                console.log('setSettings....', this.settings);\n                $SD.api.setSettings(jsn.context, this.settings);\n            }\n        }\n    },\n\n    /**\n     * Here's a quick demo-wrapper to show how you could change a key's title based on what you\n     * stored in settings.\n     * If you enter something into Property Inspector's name field (in this demo),\n     * it will get the title of your key.\n     *\n     * @param {JSON} jsn // the JSON object passed from Stream Deck to the plugin, which contains the plugin's context\n     *\n     */\n\n    setTitle: function(jsn) {\n        if (this.settings && this.settings.hasOwnProperty('mynameinput')) {\n            console.log(\"watch the key on your StreamDeck - it got a new title...\", this.settings.mynameinput);\n            $SD.api.setTitle(jsn.context, this.settings.mynameinput);\n        }\n    },\n\n    /**\n     * Finally here's a methood which gets called from various events above.\n     * This is just an idea how you can act on receiving some interesting message\n     * from Stream Deck.\n     */\n\n    doSomeThing: function(inJsonData, caller, tagColor) {\n        console.log('%c%s', `color: white; background: ${tagColor || 'grey'}; font-size: 15px;`, `[app.js]doSomeThing from: ${caller}`);\n        // console.log(inJsonData);\n    },\n\n\n};\n"]}